This is an x86-64 bomb for self-study students. 
Lab administered in Carnegie Mellon's Intro to Computer Systems course (see lab specification in pdf).

Welcome message: 
"Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!"

PHASE 1:
Invokes strings_not_equal() with user input as first argument (%rdi) and 0x402400 as second argument (%rsi). If that returns true (%rax = 1), explode_bomb is called. 
Examine memory at 0x402400: 
"Border relations with Canada have never been better."
Simply copy that string as input.
Solution: "Border relations with Canada have never been better."
Message: "Phase 1 defused. How about the next one?"

PHASE 2:
Invokes read_six_numbers(). Writes the 6 numbers on to the stack. Calls explode_bomb unless the n2 = n1 * 2, where n1 is the first number inputted. Solution: 1 2 4 8 16 32 64
Message: "That's number 2.  Keep going!"

PHASE 3:
Calls sscanf with user input in %rdi and "%d %d" format string in %rsi. Must input 2 integers.
If the first integer is 0, the PC jumps to 0x402470 and compares the second argument with 0xCF.
Solution: 0 207
Message: "Halfway there!"

PHASE 4:
Calls sscanf with user input in %rdi and "%d %d" format string in $rsi.
Must input 2 integers. First integer must be lower than or equal to 0xe. Calls func4, which must return 0.
Solution: 0 1
Message: "So you got that one.  Try this one."

PHASE 5:
Calls string_length, which must return 6. Input string of length 6. 
Each char % 16 represents an offset in string at 0x4024b0("maduiersnfotvbyl"). The offset must match the string at 0x6038c0("flyers"). Use an ASCII table to calculate the offsets and align the two strings. 
Solution: "ionefg"
Message: "Good work!  On to the next..."

PHASE 6:
Input 6 integers. Each integer must be less than or equal to 0x6. Each integer must be unique. Form a linked-list that is sorted in ascending order of the values at 0x6032d0 (node1), 0x6032e0 (node 2), ..., 0x603320 (node 6). To determine the values, inspect the memory at each address. 
The program shifts the input order: 1->6; 2->5; 3->4; 4->3; 5->2; 6->1;
Solution: 4 3 2 1 6 5
Message: "Congratulations! You've defused the bomb!"

Wohoo!

